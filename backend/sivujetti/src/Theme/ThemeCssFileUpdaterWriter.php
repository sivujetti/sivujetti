<?php declare(strict_types=1);

namespace Sivujetti\Theme;

use Pike\{PikeException};
use Sivujetti\{FileSystem};

final class ThemeCssFileUpdaterWriter {
    /** @var \Sivujetti\FileSystem */
    private FileSystem $fs;
    /**
     * @param \Sivujetti\FileSystem $fs
     */
    public function __construct(FileSystem $fs) {
        $this->fs = $fs;
    }
    /**
     * Overwrites $blockTypeName's base styles from SIVUJETTI_INDEX_PATH . "public/{$themeName}-generated.css".
     *
     * @param string $blockTypeName
     * @param string $updatedStyles
     * @param object $currentStylesAll
     * @param string $themeName
     */
    public function overwriteBlockTypeBaseStylesToDisk(string $blockTypeName,
                                                       string $updatedStyles,
                                                       object $currentStylesAll,
                                                       string $themeName): void {
        $mutated = self::replaceLinesBetween(
            from: $currentStylesAll->blockTypeBaseStyles,
            withLines: self::compileBlockTypeBaseStyles($updatedStyles, $blockTypeName),
            startLine: "/* >> Base block type styles: \"{$blockTypeName}\" start */\n",
            endLine: "/* << Base block type styles: \"{$blockTypeName}\" end */\n"
        );
        // @allow \Pike\PikeException
        $this->fs->write(SIVUJETTI_INDEX_PATH . "public/{$themeName}-generated.css", (
            "/* Generated by Sivujetti at " . gmdate("D, M d Y H:i:s e", time()) . " */\n\n".
            "/* > Base block type styles start */\n" .
            $mutated .
            "/* < Base block type styles end */\n\n" .
            "/* < Individual block styles start */\n" .
            $currentStylesAll->blockStyles .
            "/* > Individual block styles end */\n"
        ));
    }
    /**
     * @param string $input
     * @param string $blockTypeName
     * @return string
     */
    public static function compileBlockTypeBaseStyles(string $input, string $blockTypeName): string {
        $selector = "[data-block-type=\"{$blockTypeName}\"]";
        return $selector . str_replace("[[scope]]", $selector, str_replace("\r", "", $input));
    }
    /**
     * Replaces every line between $startLine and $endLine with $startLine + $withLines
     * from $from.
     *
     * @param string $from The haystack
     * @param string $withLines Lines to add after $startLine
     * @param string $startLine Add $withLines after this line
     * @param string $endLine
     * @return string
     * @throws \Pike\PikeException If $from doesn't contain $startLine or $endLine
     */
    private static function replaceLinesBetween(string $from,
                                                string $withLines,
                                                string $startLine,
                                                string $endLine): string {
        $startLineStartPos = strpos($from, $startLine);
        if ($startLineStartPos === false)
            throw new PikeException("\$from doesn't contain line `{$startLine}`",
                                    PikeException::ERROR_EXCEPTION);
        $beginningOfLineAfterStartLinePos = $startLineStartPos + strlen($startLine);
        $endLineStartPos = strpos($from, $endLine, $beginningOfLineAfterStartLinePos);
        if ($endLineStartPos === false)
            throw new PikeException("\$from doesn't contain line `{$endLine}`",
                                    PikeException::ERROR_EXCEPTION);
        return (
            substr($from, 0, $beginningOfLineAfterStartLinePos) .
            $withLines .
            substr($from, $endLineStartPos)
        );
    }
}
